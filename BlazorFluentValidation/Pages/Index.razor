@page "/"
@using BlazorFluentValidation.Data;

<PageTitle>Index</PageTitle>

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="alert alert-success" role="alert">
        @message
    </div>
}

<EditForm Model="Person" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    @*By default, the component will check for validators registered with DI first. If it can't find, any it will then try scanning the applications assemblies to find validators using reflection.*@
    @*You can control this behaviour using the DisableAssemblyScanning parameter. If you only wish the component to get validators from DI, set the value to true and assembly scanning will be skipped.*@
    <FluentValidationValidator DisableAssemblyScanning="true" />

    <div class="row mb-3">
        <label for="first-name" class="col-sm-3 col-form-label">First Name</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="first-name" @bind-Value="Person.FirstName" placeholder="First Name" />
            <ValidationMessage For="() => Person.FirstName" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="last-name" class="col-sm-3 col-form-label">Last Name</label>
        <div class="col-sm-9">
            <InputText class="form-control" id="last-name" @bind-Value="Person.LastName" placeholder="Last Name" />
            <ValidationMessage For="() => Person.LastName" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="age" class="col-sm-3 col-form-label">Age</label>
        <div class="col-sm-9">
            <InputNumber class="form-control" id="age" @bind-Value="Person.Age" />
            <ValidationMessage For="() => Person.Age" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {
    public Person Person { get; set; } = new();

    string? message;

    private void OnSubmit()
    {
        message = "Submitted successfully";
    }
}